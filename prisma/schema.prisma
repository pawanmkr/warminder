generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["user", "company"]
}

model users {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique()
  email_verified Boolean       @default(false)
  country_code   Int
  phone_number   String        @db.VarChar(10)
  password       String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  Session        session[]
  deactivated    deactivated[]
  emails         emails[]

  @@schema("user")
}

model email_verification_and_password_reset_requests {
  id         Int      @id @default(autoincrement())
  email      String
  token      String   @unique
  expiry     BigInt
  created_at DateTime @default(now())

  @@schema("user")
}

model session {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  token      String   @unique
  expiry     BigInt
  created_at DateTime @default(now())

  @@schema("user")
}

model deactivated {
  id         Int      @id @default(autoincrement())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  created_at DateTime @default(now())

  @@schema("user")
}

// Another Schema

model companies {
  id           Int            @id @default(autoincrement())
  name         String
  location     String
  size         Int?
  website      String         @default("")
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  emails       emails[]
  company_tags company_tags[]

  @@unique([name, location])
  @@schema("company")
}

model emails {
  id         Int       @id @default(autoincrement())
  email      String
  upvote     Int       @default(0)
  downvote   Int       @default(0)
  created_at DateTime  @default(now())
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  company    companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id Int

  @@unique([email, company_id])
  @@schema("company")
}

model tags {
  id           Int            @id @default(autoincrement())
  tag          String         @unique
  company_tags company_tags[]

  @@schema("company")
}

model company_tags {
  company    companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id Int
  tag        tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id     Int

  @@id([company_id, tag_id])
  @@schema("company")
}
